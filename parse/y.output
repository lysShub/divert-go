state 0 //

    0 $accept: . Start

    PROTO  shift, and goto state 4

    Start  goto state 1
    expr   goto state 2
    key    goto state 3

state 1 // PROTO EQ PROTO [$end]

    0 $accept: Start .  [$end]

    $end  accept

state 2 // PROTO EQ PROTO [$end]

    1 Start: expr .  [$end]
    2 expr: expr . op expr

    $end  reduce using rule 1 (Start)
    EQ    shift, and goto state 6
    NE    shift, and goto state 7

    op  goto state 12

state 3 // PROTO [EQ]

    3 expr: key . op value
    4 expr: key . op key

    EQ  shift, and goto state 6
    NE  shift, and goto state 7

    op  goto state 5

state 4 // PROTO

    5 key: PROTO .  [$end, EQ, NE]

    $end  reduce using rule 5 (key)
    EQ    reduce using rule 5 (key)
    NE    reduce using rule 5 (key)

state 5 // PROTO EQ [PROTO]

    3 expr: key op . value
    4 expr: key op . key

    PROTO  shift, and goto state 4
    TCP    shift, and goto state 10
    UDP    shift, and goto state 11

    key    goto state 9
    value  goto state 8

state 6 // PROTO EQ

    6 op: EQ .  [PROTO, TCP, UDP]

    PROTO  reduce using rule 6 (op)
    TCP    reduce using rule 6 (op)
    UDP    reduce using rule 6 (op)

state 7 // PROTO NE

    7 op: NE .  [PROTO, TCP, UDP]

    PROTO  reduce using rule 7 (op)
    TCP    reduce using rule 7 (op)
    UDP    reduce using rule 7 (op)

state 8 // PROTO EQ TCP [$end]

    3 expr: key op value .  [$end, EQ, NE]

    $end  reduce using rule 3 (expr)
    EQ    reduce using rule 3 (expr)
    NE    reduce using rule 3 (expr)

state 9 // PROTO EQ PROTO [$end]

    4 expr: key op key .  [$end, EQ, NE]

    $end  reduce using rule 4 (expr)
    EQ    reduce using rule 4 (expr)
    NE    reduce using rule 4 (expr)

state 10 // PROTO EQ TCP

    8 value: TCP .  [$end, EQ, NE]

    $end  reduce using rule 8 (value)
    EQ    reduce using rule 8 (value)
    NE    reduce using rule 8 (value)

state 11 // PROTO EQ UDP

    9 value: UDP .  [$end, EQ, NE]

    $end  reduce using rule 9 (value)
    EQ    reduce using rule 9 (value)
    NE    reduce using rule 9 (value)

state 12 // PROTO EQ PROTO EQ [PROTO]

    2 expr: expr op . expr

    PROTO  shift, and goto state 4

    expr  goto state 13
    key   goto state 3

state 13 // PROTO EQ PROTO EQ PROTO EQ PROTO [$end]

    2 expr: expr . op expr
    2 expr: expr op expr .  [$end, EQ, NE]

    $end  reduce using rule 2 (expr)
    EQ    shift, and goto state 6
    NE    shift, and goto state 7

    op  goto state 12

    conflict on EQ, shift, and goto state 6, reduce using rule 2
    conflict on NE, shift, and goto state 7, reduce using rule 2

